package com.company.controller;

import java.util.List;

import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;


import com.company.entity.ConfirmationForm;
import com.company.entity.EmployeeEntity;
import com.company.repository.EmployeeRepository;


@Controller

public class EmployeeController {
//
//    @Autowired
//    private EmployeeService employeeService;
//
//    @GetMapping("/getAll")
//    public ResponseEntity<List<EmployeeDTO>> getAllEmployees() {
//        List<EmployeeDTO> employees = employeeService.getAllEmployees();
//        return new ResponseEntity<>(employees, HttpStatus.OK);
//    }
//
//    @GetMapping("/{id}")
//    public ResponseEntity<EmployeeDTO> getEmployeeById(@PathVariable Long id) {
//        Optional<EmployeeDTO> employeeOpt = employeeService.getEmployeeById(id);
//        return employeeOpt.map(employeeDTO -> new ResponseEntity<>(employeeDTO, HttpStatus.OK))
//                .orElse(new ResponseEntity<>(HttpStatus.NOT_FOUND));
//    }
//
//    @PostMapping("/save")
//    public ResponseEntity<EmployeeDTO> addEmployee(@Validated  @RequestBody EmployeeDTO employeeDTO) {
//        EmployeeDTO savedEmployee = employeeService.addEmployee(employeeDTO);
//        return new ResponseEntity<>(savedEmployee, HttpStatus.CREATED);
//    }
//
//    @PutMapping("/{id}")
//    public ResponseEntity<EmployeeDTO> updateEmployee(@PathVariable Long id, @RequestBody EmployeeDTO employeeDTO) {
//        EmployeeDTO updatedEmployee = employeeService.updateEmployee(id, employeeDTO);
//        return new ResponseEntity<>(updatedEmployee, HttpStatus.OK);
//    }
//
//    @DeleteMapping("/{id}")
//    public ResponseEntity<Void> deleteEmployee(@PathVariable Long id) {
//        employeeService.deleteEmployee(id);
//        return new ResponseEntity<>(HttpStatus.NO_CONTENT);
//    }
//    // from here frontend integration started
	@Autowired
     private EmployeeRepository employeeRepo;
     // display the html page
     @GetMapping("/")
     public String getIndex(Model model) {
         List<EmployeeEntity> employeeList = employeeRepo.findAll();
         model.addAttribute("employees", employeeList);
         model.addAttribute("employee", new EmployeeEntity());
         model.addAttribute("confirmationForm", new ConfirmationForm());
         return "index";
     }
     // Insert employee data
     @PostMapping("/create")
     public String newEmployee(EmployeeEntity employee, Model model) {
         model.addAttribute("employee", new EmployeeEntity());

      

         // save the employee
         employeeRepo.save(employee);

         return "redirect:/";
     }
     // update the existing employee
     @PostMapping("/update")
     public String updateEmployee(@ModelAttribute EmployeeEntity employee, Model model) {
         model.addAttribute("employee", new EmployeeEntity());
         Optional<EmployeeEntity> existingEmployee = employeeRepo.findById(employee.getId());

         // checking employee exist or not
         if (existingEmployee.isPresent()) {
             employeeRepo.save(employee);
         } else {
             model.addAttribute("errorMessage", "Employee with ID " + employee.getId() + " not found.");
         }
         return "redirect:/";
     }
     // delete all employees data by confromation
     @PostMapping("/remove/all")
     public String removeAll(@ModelAttribute ConfirmationForm confirmationForm, Model model) {
         String confirmation = confirmationForm.getConfirmation();
         if ("Yes".equalsIgnoreCase(confirmation)) {
             employeeRepo.deleteAll();
         } else {
             return "redirect:/";
         }
         return "redirect:/";
     }
     @PostMapping("/remove")
     public String removeEmployee(EmployeeEntity employee, Model model) {
         model.addAttribute("employee", new EmployeeEntity());
         Optional<EmployeeEntity> existingEmployee = employeeRepo.findById(employee.getId());
         if (existingEmployee.isPresent()) {
             employeeRepo.deleteById(employee.getId());
         }
         return "redirect:/";
     }
    
}

